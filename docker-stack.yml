version: "3"

services:
  proxy:
    image: traefik:v2.1
    command: --api.insecure=true --providers.docker --providers.docker.swarmMode=true
    ports:
      - 80:80
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      replicas: 1
      placement:
        constraints:
          - "node.role==manager"

  app:
    image: python-app
    working_dir: /app
    volumes:
      - ./app:/app
    environment:
      FLASK_ENV: development
      DEBUG_METRICS: 'true'
    labels:
      traefik.http.routers.flask.rule: PathPrefix(`/api`)
      traefik.http.middlewares.strip-api.stripprefix.prefixes: /api
      traefik.http.services.flask.loadbalancer.server.port: 5000
      traefik.http.routers.flask.middlewares: strip-api@docker
    deploy:
      replicas: 2
      placement:
        constraints:
          - "node.role==worker"

  react-client:
    image: vtcs2304s19/blabber-client
    labels:
      traefik.http.routers.react.rule: PathPrefix(`/`)
      traefik.http.services.react.loadbalancer.server.port: 80
    deploy:
      replicas: 2
      placement:
        constraints:
          - "node.role==worker"

  mongo:
    image: mongo
    deploy:
      replicas: 1
      placement:
        constraints:
          - "node.role==worker"

  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
  
  grafana:
    image: grafana/grafana
    volumes:
      - ./grafana-storage:/var/lib/grafana
    ports:
      - 3000:3000
    labels:
      traefik.http.routers.grafana.rule: PathPrefix(`/metrics`)
      traefik.http.services.grafana.loadbalancer.server.port: 3000